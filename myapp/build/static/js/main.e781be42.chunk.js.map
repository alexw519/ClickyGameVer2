{"version":3,"sources":["components/Header.js","components/Card.js","components/Wrapper.js","App.js","index.js"],"names":["Header","props","className","score","highScore","children","Card","alt","name","src","imageURL","data-status","status","id","onClick","clickedImage","Wrapper","App","state","Characters","clicked","includes","setState","newArray","push","shuffle","array","newShuffle","i","length","j","Math","floor","random","this","map","Component","ReactDOM","render","document","getElementById"],"mappings":"ioFAkBeA,G,MAdA,SAAAC,GAEX,OACI,6BACA,4BAAQC,UAAY,aAChB,0CACA,sCAAYD,EAAME,MAAlB,gBAAsCF,EAAMG,WAC5C,wBAAIF,UAAU,UAEjBD,EAAMI,YCCAC,G,MAXF,SAAAL,GAET,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,SACX,yBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,SAAUC,cAAcV,EAAMW,OAAQC,GAAIZ,EAAMY,GAAIC,QAAS,kBAAMb,EAAMc,aAAad,EAAMY,W,OCD9HG,MALf,SAAiBf,GAEb,OAAO,yBAAKC,UAAU,WAAWD,EAAMI,WC+E5BY,E,2MA5EcC,MAAQ,CAAEC,aAAYC,QAAS,GAAIjB,MAAO,EAAGC,UAAW,G,EAGjFW,aAAe,SAAAF,GAGX,GAAG,EAAKK,MAAME,QAAQC,SAASR,GAC/B,CAAC,IAAD,EAC6B,EAAKK,MAAzBd,EADT,EACSA,UAAWD,EADpB,EACoBA,MAEZC,EAAYD,IACZC,EAAYD,GAEhBA,EAAQ,EAGR,EAAKmB,SAAS,CAACF,QAPE,GAOmBjB,QAAOC,kBAK/C,CAAC,IAAD,EAC6B,EAAKc,MAAzBd,EADT,EACSA,UAAWD,EADpB,EACoBA,MACZoB,EAAW,EAAKL,MAAME,QAG1BG,EAASC,KAAKX,GAEXT,IADHD,IAEIC,EAAYD,GAGhB,EAAKmB,SAAS,CAACF,QAASG,EAAUpB,QAAOC,cAI7C,EAAKqB,QAAQN,I,EAKjBM,QAAU,SAAAC,GAIN,IAFA,IAAIC,EAAaD,EAERE,EAAID,EAAWE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEX,CAACD,EAAWG,GAAIH,EAAWC,IAA3DD,EAAWC,GAFgC,KAE5BD,EAAWG,GAFiB,KAKpD,EAAKR,SAASK,I,wEAIL,IAAD,OACJ,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CACIxB,MAAS+B,KAAKhB,MAAMf,MACpBC,UAAa8B,KAAKhB,MAAMd,YAE5B,yBAAKF,UAAU,OACdgC,KAAKhB,MAAMC,WAAWgB,IAAI,SAAAhB,GAAU,OACjC,kBAAC,EAAD,CACIX,KAAQW,EAAWX,KACnBE,SAAYS,EAAWT,SACvBK,aAAgB,EAAKA,aACrBF,GAAMM,EAAWN,a,GAnEvBuB,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e781be42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\n//This function is used to put the header on the screen which contains the score and the high score.\r\nconst Header = props =>\r\n{\r\n    return(\r\n        <div>\r\n        <header className = \"jumbotron\">\r\n            <h1>ClickyGame</h1>\r\n            <h3>Score: {props.score} High Score: {props.highScore}</h3>\r\n            <h3 className=\"test\"></h3>\r\n        </header>\r\n        {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"../styles/Card.css\";\r\n\r\nconst Card = props =>\r\n{\r\n    return(\r\n        <div className=\"card col-md-3\">\r\n            <div className=\"image\">\r\n                <img alt={props.name} src={props.imageURL} data-status ={props.status} id={props.id} onClick={() => props.clickedImage(props.id)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Wrapper(props)\r\n{\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","//Import Statments\r\nimport React, { Component } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Card from \"./components/Card\";\r\nimport Characters from \"./characters.json\";\r\nimport Wrapper from \"./components/Wrapper\";\r\n\r\nclass App extends Component{ state = { Characters, clicked: [], score: 0, highScore: 0 };\r\n\r\n    //Function For When An Image Is Clicked\r\n    clickedImage = id => \r\n    {\r\n        //If Image Has Been Clicked, Check If New High Score And Reset The Score And Status\r\n        if(this.state.clicked.includes(id))\r\n        {\r\n            let {highScore, score} = this.state;\r\n            let emptyArray = [];\r\n            if (highScore < score)\r\n                highScore = score;\r\n        \r\n            score = 0;\r\n\r\n            //If The Image Has Been Clicked, Empty The Array Of Clicked Ids\r\n            this.setState({clicked: emptyArray, score, highScore});\r\n        }\r\n\r\n        //If That Image Has Not Been Clicked Yet\r\n        else\r\n        {\r\n            let {highScore, score} = this.state;\r\n            let newArray = this.state.clicked;\r\n\r\n            //Adds The Id Of The Clicked Image To The Array\r\n            newArray.push(id);\r\n            score++;\r\n            if(highScore < score)\r\n                highScore = score;\r\n\r\n                //Updates The High Score (If Needed) And The Score\r\n            this.setState({clicked: newArray, score, highScore});\r\n        }\r\n\r\n        //Calls A Function To Shuffle The Location Of The Characters\r\n        this.shuffle(Characters);\r\n    };\r\n\r\n    //Shuffle function is based off of the following code.\r\n    //https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\r\n    shuffle = array =>\r\n    {\r\n        let newShuffle = array;\r\n\r\n        for (let i = newShuffle.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [newShuffle[i], newShuffle[j]] = [newShuffle[j], newShuffle[i]];\r\n        }\r\n\r\n    this.setState(newShuffle)\r\n    }\r\n\r\n    //Renders All Of The JS Files On The Page\r\n    render(){\r\n        return(\r\n            <Wrapper>\r\n                <Header \r\n                    score = {this.state.score}\r\n                    highScore = {this.state.highScore}\r\n                />\r\n                <div className=\"row\">\r\n                {this.state.Characters.map(Characters => (\r\n                    <Card\r\n                        name = {Characters.name}\r\n                        imageURL = {Characters.imageURL}\r\n                        clickedImage = {this.clickedImage}\r\n                        id = {Characters.id}\r\n                    />\r\n                ))}\r\n                </div>\r\n            </Wrapper>\r\n        )\r\n    }\r\n\r\n};\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}